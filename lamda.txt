import json
import requests
import os
import logging
import random
import time
import uuid
import base64
import boto3
from botocore.exceptions import ClientError

# --- Setup ---
logger = logging.getLogger()
logger.setLevel(logging.INFO)

RUNPOD_API_KEY = os.environ.get('RUNPOD_API_KEY')
RUNPOD_ENDPOINT_ID = os.environ.get('RUNPOD_ENDPOINT_ID')
S3_IMAGES_BUCKET_NAME = os.environ.get('S3_IMAGES_BUCKET_NAME')
S3_FACES_BUCKET_NAME = os.environ.get('S3_FACES_BUCKET_NAME')

s3_client = boto3.client('s3')

# --- Default Generation Settings ---
DEFAULT_STEPS = 42
DEFAULT_CFG_SCALE = 3.7
DEFAULT_SAMPLER = "DPM++ 2M SDE Heun"

def generate_random_seed():
    """Generates a random seed."""
    return random.randint(0, 2**32 - 1)

# --- Main Lambda Handler ---
# --- Main Lambda Handler ---
def lambda_handler(event, context):
    logger.info(f"STARTING EXECUTION...")
    
    if 'body' in event and isinstance(event.get('body'), str):
        body = json.loads(event.get('body', '{}'))
    else:
        body = event

    logger.info(f"Parsed request body: {json.dumps(body)}")

    try:
        if not all([RUNPOD_API_KEY, RUNPOD_ENDPOINT_ID, S3_IMAGES_BUCKET_NAME, S3_FACES_BUCKET_NAME]):
            raise ValueError("Required environment variables are missing.")

        # --- Consolidated Parameter Definitions ---
        user_prompt = body.get('prompt')
        if not user_prompt:
            return {"statusCode": 400, "body": json.dumps({"message": "The 'prompt' parameter is required."})}
        
        negative_prompt = body.get('negative_prompt', "")
        steps = int(body.get('steps', DEFAULT_STEPS))
        cfg_scale = float(body.get('cfg_scale', DEFAULT_CFG_SCALE))
        width = int(body.get('width', 1024))
        height = int(body.get('height', 1024))
        seed = body.get('seed', 'random')
        sampler_name = body.get('sampler_name', DEFAULT_SAMPLER)
        lora_level = float(body.get('lora_level', 0.6))
        clip_skip = int(body.get('clip_skip', 1))

        source_face_id = body.get('source_face_id')
        reactor_model = body.get('reactor_model', 'inswapper_128.onnx')
        restore_face_model = body.get('restore_face_model', 'CodeFormer')
        gfpgan_visibility = float(body.get('gfpgan_visibility', 1))
        codeformer_weight = float(body.get('codeformer_weight', 0.5))
        upscaler = body.get('upscaler', '4x-UltraSharp')
        upscaler_scale = float(body.get('upscaler_scale', 1.5))
        upscaler_visibility = float(body.get('upscaler_visibility', 0.8))
        face_detection_threshold = float(body.get('face_detection_threshold', 0.6))
        max_faces = int(body.get('max_faces', 1))
        source_face_index = str(body.get('source_face_index', '0'))
        target_face_index = str(body.get('target_face_index', '0'))

        # --- Build Payloads ---
        final_seed = generate_random_seed() if str(seed).lower() == 'random' else int(seed)

        #
        # ##################################################################
        # ## CRITICAL FIX IS HERE:                                      ##
        # ## `lora_level` and `clip_skip` are now correctly placed in   ##
        # ## `override_settings` to ensure the API processes them.      ##
        # ##################################################################
        #
        worker_payload = {
            "prompt": user_prompt,
            "negative_prompt": negative_prompt,
            "steps": steps,
            "cfg_scale": cfg_scale,
            "width": width,
            "height": height,
            "seed": final_seed,
            "sampler_name": sampler_name,
            "override_settings": {
                "sd_lora": lora_level,
                "CLIP_stop_at_last_layers": clip_skip
            },
            "enable_hr": False
        }
        
        if source_face_id:
            logger.info(f"Source face ID '{source_face_id}' provided. Building ReActor payload...")
            try:
                s3_key = f"faces/{source_face_id}.png"
                s3_object = s3_client.get_object(Bucket=S3_FACES_BUCKET_NAME, Key=s3_key)
                face_b64 = base64.b64encode(s3_object['Body'].read()).decode('utf-8')
                
                reactor_args = [
                    face_b64,                         
                    True,                             
                    source_face_index,                
                    target_face_index,                
                    reactor_model,                    
                    restore_face_model,               
                    gfpgan_visibility,                
                    True,                             
                    upscaler,                         
                    upscaler_scale,                   
                    upscaler_visibility,              
                    False,                            
                    True,                             
                    1,                                
                    0, 0, False, codeformer_weight, False, False, "CUDA", True, 0, "", "", None, False, False,       
                    face_detection_threshold,         
                    max_faces                         
                ]
                
                worker_payload["alwayson_scripts"] = {"reactor": {"args": reactor_args}}
                
            except ClientError as e:
                if e.response['Error']['Code'] == 'NoSuchKey':
                    logger.error(f"Face ID '{source_face_id}' not found.")
                    return {"statusCode": 404, "body": json.dumps({"message": f"Face with ID '{source_face_id}' not found."})}
                else:
                    raise e

        # --- Submit Job & Poll ---
        run_payload = {"input": worker_payload}
        headers = {"Authorization": f"Bearer {RUNPOD_API_KEY}", "Content-Type": "application/json"}
        run_url = f"https://api.runpod.ai/v2/{RUNPOD_ENDPOINT_ID}/run"
        
        logger.info(f"Submitting final payload to RunPod worker...")
        response = requests.post(run_url, json=run_payload, headers=headers)
        response.raise_for_status()
        
        job_details = response.json()
        job_id = job_details.get("id")
        logger.info(f"Job submitted successfully. Job ID: {job_id}. Polling for status...")
        
        status_url = f"https://api.runpod.ai/v2/{RUNPOD_ENDPOINT_ID}/status/{job_id}"
        start_time = time.time()
        
        while (time.time() - start_time) < 840:
            status_response = requests.get(status_url, headers=headers)
            status_response.raise_for_status()
            job_status = status_response.json()

            if job_status.get("status") == "COMPLETED":
                output = job_status.get("output", {})
                if "error" in output:
                    logger.error(f"Worker error: {output['error']}")
                    return {"statusCode": 500, "body": json.dumps({"message": "Worker returned an error.", "details": output['error']})}
                
                images_list = output.get("images", [])
                if not images_list:
                    raise ValueError("Worker response did not contain any images.")
                
                image_bytes = base64.b64decode(images_list[0])
                file_name = f"images/{uuid.uuid4()}.png"
                s3_client.put_object(Bucket=S3_IMAGES_BUCKET_NAME, Key=file_name, Body=image_bytes, ContentType='image/png')
                s3_url = f"https://{S3_IMAGES_BUCKET_NAME}.s3.amazonaws.com/{file_name}"
                
                final_output = {
                    "image_url": s3_url,
                    "seed": json.loads(output.get("info", "{}")).get("seed", final_seed),
                    "detected_faces": output.get('detected_faces', [])
                }
                return {"statusCode": 200, "body": json.dumps(final_output)}

            elif job_status.get("status") == "FAILED":
                logger.error(f"Job failed: {job_status.get('output')}")
                return {"statusCode": 500, "body": json.dumps({"message": "Image generation job failed.", "details": job_status.get("output")})}
            
            time.sleep(5)
        
        raise requests.exceptions.Timeout("Job polling timed out.")

    except Exception as e:
        logger.error(f"An unexpected error occurred: {e}", exc_info=True)
        return {"statusCode": 500, "body": json.dumps({"message": "An internal server error occurred."})}